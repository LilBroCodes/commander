plugins {
    id 'java'
    id 'maven-publish'
    id 'xyz.jpenilla.run-paper' version "2.3.1"
}

group = 'org.lilbrocodes'
version = project.version
mc_version = project.mc_version

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:${project.mc_version}-${project.spigot_version}"

    implementation "org.jetbrains:annotations:${project.annotations_version}"
}

tasks {
    runServer {
        minecraftVersion mc_version
    }
    jar {
        archiveBaseName.set("commander")
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

publishing {
    publications {
        commander(MavenPublication) {
            from components.java
            groupId = 'org.lilbrocodes'
            artifactId = 'commander'
            version = version

            // Add the sources jar
            artifact tasks.sourcesJar
        }
    }

    repositories {
        maven {
            name = "cloudsmith"
            url = uri("https://maven.cloudsmith.io/lilbrocodes/commander/")
            credentials {
                username = project.findProperty("CLOUDSMITH_USERNAME") ?: System.getenv("CLOUDSMITH_USERNAME")
                password = project.findProperty("CLOUDSMITH_API_KEY") ?: System.getenv("CLOUDSMITH_API_KEY")
            }
        }
    }
}

tasks.named("generateMetadataFileForCommanderPublication") {
    dependsOn tasks.sourcesJar
}
